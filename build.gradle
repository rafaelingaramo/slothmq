apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.12"
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file ('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    description = 'Runs integration tests'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()

    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/integrationTest.exec").get().asFile
    }
}


def jacocoExcludes = [
        'org/slothmq/client/**/*',
        'org/slothmq/dto/**/*',
        'org/slothmq/exception/**/*',
        'org/slothmq/mongo/**/*',
        'org/slothmq/protocol/ProtocolTransferObject*',
        'org/slothmq/queue/runner/**/*',
        'org/slothmq/server/configuration/CorsHandler*',
        'org/slothmq/server/web/annotation/**/*',
        'org/slothmq/server/websocket/**/*',
        'org/slothmq/server/Server*',
        'org/slothmq/server/SlothHttpServer*',
        'org/slothmq/server/SlothNettyWebSocketServer*',
        'org/slothmq/server/SlothSharedResources*',
        'org/slothmq/server/SlothSocketServer*'
]

jacocoTestReport {
    dependsOn test, integrationTest
    reports {
        xml.required = true
        html.required = true
    }

    executionData(
            fileTree(buildDir).include(
                    "jacoco/test.exec",
                    "jacoco/integrationTest.exec"
            )
    )

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: jacocoExcludes)
                })
        )
    }
}

jacocoTestCoverageVerification {
    dependsOn test, integrationTest
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoExcludes)
    }))

    executionData(
            fileTree(buildDir).include(
                    "jacoco/test.exec",
                    "jacoco/integrationTest.exec"
            )
    )
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'org.mongodb:mongodb-driver-sync:5.5.0'
    implementation 'io.netty:netty-all:4.1.107.Final'
    implementation 'com.auth0:java-jwt:4.5.0'

    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.mockito:mockito-core:5.18.0'

    integrationTestImplementation 'io.rest-assured:rest-assured:5.4.0'
    integrationTestImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    integrationTestImplementation 'org.testcontainers:mongodb:1.19.3'



    //TODO fix vulnerabilities
}
